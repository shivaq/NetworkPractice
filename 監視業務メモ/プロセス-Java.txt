監視業務のルーチンワークとしてよくあるのが、
Javaで開発されたシステムの、（特にTomcatなどのアプリケーションサーバー上で動くサーバーアプリケーション）
プロセス再起動

■プロセスのメモリー空間とは
通常のプロセスの場合、このメモリー空間を
プログラムの呼び出し元のアドレスなどを格納するための「スタック領域」と、
オブジェクトをnew()すると確保されるような、自由に利用できる「ヒープ領域」に分けられる。

ソフトウェアで何か作業をしていて突然そのプログラムがクラッシュしたり、
普通に動いているのにもかかわらず、長時間動かしていると、ある日突然ダウン
これらは、ほぼすべて、
「本来アクセスしてはいけないメモリー領域にアクセスし想定しない値を取得した」
「必要なくなったメモリー領域を開放しておらず、このヒープ領域を圧迫して動けなくなった」
など、メモリー管理にまつわるもの

C言語などで作られたネイティブプログラムの場合は、ヒープ領域のメモリー管理について、
プログラムが自分で行わないといけない。

Javaでは、JVM（Java Virtual Machine）という実行環境（つまりインタープリタ）にGC機能が実装されており、
必要なくなったメモリー領域の開放は、すべてGCが行ってくれる。

■ヒープ領域について詳細
JVMでは、部分的にネイティブコードが動作する事がある。

ヒープ領域（自由に利用できるメモリ空間）には
ネイティブコードが使用する「ネイティブヒープ領域（Cheap）」と、
プログラムの中でクラスをnew()することで確保される「Javaヒープ領域」に大別される。

Javaヒープ領域では、オブジェクト展開後の経過時間に応じて領域を世代別に管理している。
その管理のため、Javaヒープ領域はさらに役割ごとに細分化されている。

■参照カウンタ
まず、オブジェクトが生成される〔new()を実行する〕と、
ヒープ領域内に、メモリー領域が確保される。
同時に、領域管理テーブルに、その確保された領域のアドレスがエントリーされる。
「new()された」ということは、その領域は1つのオブジェクトから参照されているので、参照カウンタは‘1’となる。
その後、他のオブジェクトからも参照されると、参照カウンタは‘2’となる。

■スコープ
プログラムには、スコープというものがあり、
生成されたオブジェクトはスコープを超えて存在し続けることができない。
またスコープの外側から、そのオブジェクトを参照することができない。

スコープの範囲
「クラス」、「オブジェクトインスタンス」、「メソッド」（関数）。

■GCはこのように参照されないメモリ領域を見つける
例えば、ある関数が呼ばれたとしよう。
その関数の冒頭で、クラスAのオブジェクトが生成されたとする。
このインスタンスのスコープは、この関数となる。関数が実行されている最中に、何度か参照されたり、
書き換えられたりといったことが行われる。そして、関数の処理が終了し、関数から処理が抜けると、
同時に、スコープを抜けることとなり、このオブジェクトは参照されなくなる。

こうして、オブジェクトの参照元がなくなると、
前述した参照カウンタが「0」になり、どこからも参照されない（つまり利用されていない）メモリー領域ができる。
このような、どこからも参照されないメモリー領域を定期的に探し出して、
見つけたらそれを自動で削除する、という処理を行っているのがCGだ。

CGは、このようにプログラマーが意識しなくても、必要なくなったメモリー領域を定期的に掃除してくれて、
さらに歯抜け状態になったヒープ領域中に残存するメモリー領域を再配置し、
常にメモリー空間を適切な状態に維持してくれるのである。

■ガーベージがフルになり、掃除の時間にシステムが一旦止められる
徐々に、世代の古いオブジェクト用ヒープ領域にもオブジェクトが蓄積されていく。
一般的に、このヒープ領域用にはメモリーを大きく確保しておき、空き容量が不足しないように運用する
それでも長期間稼働するうちに、空き容量がなくなってしまうこともある。

そうなると、本来の処理を行っているスレッドをすべて止めて、
対象となるメモリー領域にロックをかけ、
「再配置」「アドレスつけかえ」「管理テーブルのメンテナンス」などを行う必要が生じる。
これが、「FullGC」

しばらくの間、システムとしての処理が止まってしまう

このことで、システムそのもののレスポンスが悪くなったり、
場合によってはまったく反応しなくなったりといったことが発生する。
このことが、システム運用上、トラブルではないにもかかわらず、
システムトラブルと同等の症状を引き起こすこととなり、
システム運用の現場では悩みの種

「Javaプログラムで再起動を行う」のは、
Full GCが発生する前に、システムそのものを1から再起動してメモリー空間を綺麗な状態に戻し、
Full GCを発生させないために行う、“トラブル予防の一環”







■確認したいこと
top, ps時の COMMAND の意味
lsof のhelp

