5:40 から

Parameters:
  # 再利用案1：一番簡単で、一番エレガントじゃない方法
  # EC2Instancesize:
  #   Type: String
  #   Default: t2.micro
  #   AllowedValues:
  #     - t2.micro
  #     - t2.small
  #     - t2.medium
  #   Description: EC2 instance Sizes
  # 再利用案2：そこそこエレガントな方法
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Instance Sizes for EC2 and DB

  DatabaseName:
    Type: String
    Default: wordpress
  DatabaseUser:
    Type: String
    Default: wordpress
  DatabasePassword:
    Type: String
    Default: w0rdpr4497
    NoEcho: true

  # 再利用案2：そこそこエレガントな方法
Mappings:
  EnvSize:
    SMALL:
      "MyEC2": "t2.micro"
      "DB": "db.t2.micro"
    MEDIUM:
      "MyEC2": "t2.small"
      "DB": "db.t2.small"
    LARGE:
      "MyEC2": "t2.medium"
      "DB": "db.t2.medium"
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-1853ac65" # N.Virginia - Ama Sept'16
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-northeast-1:
      "AMALINUX" : "ami-a77c30c1" # AMALINUX SEP 2016

Resources:
  DB:
    Type: "AWS::RDS::DBInstance"
    Properties:
      AllocatedStorage: 5
      StorageType: gp2
      DBInstanceClass: !FindInMap [EnvSize, !Ref EnvironmentSize, DB]
      DBName: !Ref DatabaseName
      Engine: MySQL
      MasterUsername: !Ref DatabaseUser
      MasterUserPassword: !Ref DatabasePassword

  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      # ハードコード
      # ImageId: ami-1853ac65 # N.Virginia - Ama Sept'16
      # マップを使う
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]

      # ハードコードの場合
      # InstanceType: t2.micro
      # 再利用案1：一番簡単で、一番エレガントじゃない方法
      # InstanceType: !Ref EC2Instancesize

      # 再利用案2：そこそこエレガントな方法
      #             !FindInMap [MAP, KEY, NAME]
      InstanceType: !FindInMap [ EnvSize, !Ref EnvironmentSize, MyEC2]
      KeyName: shivaq01Test

      # ▼ CFN-Init を使わない場合
      UserData:
        "Fn::Base64":
          !Sub |
            #!/bin/bash
            yum install httpd php mysql php-mysql -y
            yum update -y
            chkconfig httpd on
            service httpd start
            cd /var/www/html
            wget https://wordpress.org/latest.tar.gz
            tar -zxvf latest.tar.gz --strip 1
            rm latest.tar.gz
            cp wp-config-sample.php wp-config.php
            sed -i 's/database_name_here/${DatabaseName}/g' wp-config.php
            sed -i 's/localhost/${DB.Endpoint.Address}/g' wp-config.php
            sed -i 's/username_here/${DatabaseUser}/g' wp-config.php
            sed -i 's/password_here/${DatabasePassword}/g' wp-config.php

      # ▼ CFN-Init を使う場合
      UserData:
        # 仕様で、!Base64 !Sub みたく、省略形をつなげて使うことはできない。
        # よって、Base64 に関しては、フルで記述するパターンにする
        "Fn::Base64":
          # Sub:スタックを作成/更新するまで使用できない値を含む
          # コマンド/出力を作成するために、この関数を使用
          # ここでは、UserData の Base64 が走る前に、パラメータから取得する各種 値を
          # 下記コマンドに渡した上で、Base64 を走らせる
          # パイプは、続く行がマルチラインになることを表す
          !Sub |
            #!/bin/bash

            # aws-cfn-bootstrap →CloudFormation ヘルパースクリプト が含まれたパッケージ
            # ヘルパースクリプト →cfn-signal, hup, init, get-metadata... などなど
            yum update -y aws-cfn-bootstrap # CFN-Init 系を行う時は、まずこれを実行するのがベストプラクティス
            # configsets "wordpress" を指定。指定しない場合、デフォルトのコンフィグ名 "config" が走る
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2 --configsets wordpress --region ${AWS::Region}
            yum -y update # cfn-init がインストールした諸々パッケージもアップデートされるので、ベストプラクティス
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress:  # このコンフィグセットが Base64 で指定されている
            - "configure_cfn"
            - "install_wordpress"
            - "config_wordpress"
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MyEC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2 --configsets wordpress --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            # HUP （Hang Up）ターミナルが終了したらプロセスに送られるシグナル。
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /var/www/html/index2.html:
              content: !Ref TestString

          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_wordpress:
          packages:
            yum:
              httpd: []
              php: []
              mysql: []
              php-mysql: []
          sources:
            /var/www/html: "http://wordpress.org/latest.tar.gz"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_wordpress:
          commands:
            01_clone_config:
              cwd: "/var/www/html/wordpress"
              test: "test ! -e /var/www/html/wordpress/wp-config.php"
              command: "cp wp-config-sample.php wp-config.php"
            02_inject_dbhost:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
#           database_name_here を DatabaseName と置換する
# sed -i 's/database_name_here/${DatabaseName}/g'
                sed -i 's/localhost/${DB.Endpoint.Address}/g' wp-config.php
            03_inject_dbname:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/database_name_here/${DatabaseName}/g' wp-config.php
            04_inject_dbuser:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/username_here/${DatabaseUser}/g' wp-config.php
            05_inject_dbpassword:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/password_here/${DatabasePassword}/g' wp-config.php



  S3:
    Type: "AWS::S3::Bucket"

# ▼ 物理 ID  →i-xxxxx
#   スタックのライフサイクル の間にしばしば変更される
#
# ▼ ロジカル ID →MyEC2
#   スタックのライフサイクルの間変更されない


# ▼ UserData と CfnInit との違い
# ・UserData
#   - procedural steps A ->B ->C
#   - 管理が面倒
#   - OS や Distribution を指定して行う
# ・CloudFormationInit
#   - desired-state エンジン。手続き的ではない
#   - cfn-init プロセスにディレクティブを渡す
#   - OS インディペンデント であろうとする
#   - Config セットをサポート
#   - 順番指定がいい感じ
#   - タイミングの管理ができるケースも有る
#   - S3 などのエンドポイントに対する認証も使える
#   - S3 や HTTP、HTTPS、GitHub から ファイルやフォルダを作成できる
#   - 冪等性を保証
