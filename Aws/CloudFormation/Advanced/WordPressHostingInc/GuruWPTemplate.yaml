5:10 から

Parameters:
  # 再利用案1：一番簡単で、一番エレガントじゃない方法
  # EC2Instancesize:
  #   Type: String
  #   Default: t2.micro
  #   AllowedValues:
  #     - t2.micro
  #     - t2.small
  #     - t2.medium
  #   Description: EC2 instance Sizes
  # 再利用案2：そこそこエレガントな方法
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Instance Sizes for EC2 and DB

  DatabaseName:
    Type: String
    Default: wordpress
    MinLength: 1
    MaxLength: 64
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*" # start with a letter, only alphanumeric characters - new for this lesson
  DatabaseUser:
    Type: String
    # SQL インジェクションを防止するためにも、文字列の長さを制限する
    MinLength: 1
    MaxLength: 16
    Default: wordpress
    # SQL インジェクション を防止するためにも、); とかを使えないようにする。
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*" # start with a letter, only alphanumeric characters - new for this lesson
  DatabasePassword:
    Type: String
    MinLength: 8
    MaxLength: 41
    Default: w0rdpr355
    NoEcho: true
    AllowedPattern: "[a-zA-Z0-9]*" # Must only contain alphanumeric characters - new for this lesson

  # 再利用案2：そこそこエレガントな方法
Mappings:
  EnvSize:
    SMALL:
      "MyEC2": "t2.micro"
      "DB": "db.t2.micro"
    MEDIUM:
      "MyEC2": "t2.small"
      "DB": "db.t2.small"
    LARGE:
      "MyEC2": "t2.medium"
      "DB": "db.t2.medium"
  RegionMap:
    us-east-1:
      "AMALINUX" : "ami-1853ac65" # N.Virginia - Ama Sept'16
    us-east-2:
      "AMALINUX" : "ami-71ca9114" # AMALINUX SEP 2016
    us-west-1:
      "AMALINUX" : "ami-de347abe" # AMALINUX SEP 2016
    us-west-2:
      "AMALINUX" : "ami-b04e92d0" # AMALINUX SEP 2016
    ca-central-1:
      "AMALINUX" : "ami-eb20928f" # AMALINUX SEP 2016 v01
    eu-west-1:
      "AMALINUX" : "ami-d41d58a7" # AMALINUX SEP 2016
    eu-central-1:
      "AMALINUX" : "ami-0044b96f" # AMALINUX SEP 2016
    eu-west-2:
      "AMALINUX" : "ami-bfe0eadb" # AMALINUX SEP 2016 v01
    ap-northeast-1:
      "AMALINUX" : "ami-a77c30c1" # AMALINUX SEP 2016
  InstanceSize:
    SMALL:
      "EC2" : "t2.micro"
      "DB" : "db.t2.micro"
    MEDIUM:
      "EC2" : "t2.small"
      "DB" : "db.t2.small"
    LARGE:
      "EC2" : "t2.medium"
      "DB" : "db.r3.xlarge"
Resources:
  DB:
    Type: "AWS::RDS::DBInstance"
    Condition: isntLarge # added - only create the MySQL DB if its small/med
    DeletionPolicy: Snapshot
    Properties:
      AllocatedStorage: 5
      StorageType: gp2
      DBInstanceClass: !FindInMap [InstanceSize, !Ref EnvironmentSize, DB] # Dynamic mapping + Pseudo Parameter
      DBName: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseName]
      Engine: MySQL
      StorageType: gp2
      MasterUsername: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseUser]
      MasterUserPassword: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabasePassword]
      DBSnapshotIdentifier: !If [isRestore, !Ref SnapToRestore, !Ref "AWS::NoValue"]
  DBAuroraCluster:
    Type: "AWS::RDS::DBCluster"
    DeletionPolicy: Snapshot
    Condition: isLarge # only create if its a large EnvironmentSize
    Properties:
      # リストア時にここを指定すると、下記エラー
      # DBName must be null when Restoring for this Engine.
      DatabaseName: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseName]
      Engine: aurora
      MasterUsername: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabaseUser]
      MasterUserPassword: !If [isRestore, !Ref "AWS::NoValue", !Ref DatabasePassword]
      SnapshotIdentifier: !If [isRestore, !Ref SnapToRestore, !Ref "AWS::NoValue"]
  DBAurora:
    Type : "AWS::RDS::DBInstance"
    Condition: isLarge # only create if its a large EnvironmentSize
    Properties:
      DBClusterIdentifier: !Ref DBAuroraCluster
      Engine: aurora
      DBInstanceClass: !FindInMap [InstanceSize, !Ref EnvironmentSize, DB]

  MyEC2:
    Type: AWS::EC2::Instance
    Properties:
      # ハードコード
      # ImageId: ami-1853ac65 # N.Virginia - Ama Sept'16
      # マップを使う
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", AMALINUX]

      # ハードコードの場合
      # InstanceType: t2.micro
      # 再利用案1：一番簡単で、一番エレガントじゃない方法
      # InstanceType: !Ref EC2Instancesize

      # 再利用案2：そこそこエレガントな方法
      #             !FindInMap [MAP, KEY, NAME]
      InstanceType: !FindInMap [ EnvSize, !Ref EnvironmentSize, MyEC2]
      KeyName: shivaq01Test

      # ▼ CFN-Init を使わない場合


      # ▼ CFN-Init を使う場合
      UserData:
        # 仕様で、!Base64 !Sub みたく、省略形をつなげて使うことはできない。
        # よって、Base64 に関しては、フルで記述するパターンにする
        "Fn::Base64":
          # Sub:スタックを作成/更新するまで使用できない値を含む
          # コマンド/出力を作成するために、この関数を使用
          # ここでは、UserData の Base64 が走る前に、パラメータから取得する各種 値を
          # 下記コマンドに渡した上で、Base64 を走らせる
          # パイプは、続く行がマルチラインになることを表す
          !Sub |
            #!/bin/bash

            # aws-cfn-bootstrap →CloudFormation ヘルパースクリプト が含まれたパッケージ
            # ヘルパースクリプト →cfn-signal, hup, init, get-metadata... などなど
            yum update -y aws-cfn-bootstrap # CFN-Init 系を行う時は、まずこれを実行するのがベストプラクティス
            # configsets "wordpress" を指定。指定しない場合、デフォルトのコンフィグ名 "config" が走る
            /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2 --configsets wordpress --region ${AWS::Region}
            yum -y update # cfn-init がインストールした諸々パッケージもアップデートされるので、ベストプラクティス
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          wordpress:  # このコンフィグセットが Base64 で指定されている
            - "configure_cfn"
            - "install_wordpress"
            - "config_wordpress"
        # CFN をセットするためのブロック
        configure_cfn:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.MyEC2.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource MyEC2 --configsets wordpress --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            # cfn-hup →リソースメタデータの変更を検出し、指定された操作を実行するデーモン
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
            /var/www/html/index2.html:
              content: !Ref TestString

          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - "/etc/cfn/cfn-hup.conf"
                  - "/etc/cfn/hooks.d/cfn-auto-reloader.conf"
        install_wordpress:
          packages:
            yum:
              httpd: []
              php: []
              mysql: []
              php-mysql: []
          sources:
            # ダウンロードして、展開もする
            /var/www/html: "http://wordpress.org/latest.tar.gz"
          services:
            sysvinit:
              httpd:
                enabled: "true"
                ensureRunning: "true"
        config_wordpress:
          # 下記は files セクションでもできる。commands でやる理由は、
          # 各ステップに区切りをつけて記述することで、
          # 設定方法が代わった時に、変化に適用しやすくするため。
          commands:
            01_clone_config:
              cwd: "/var/www/html/wordpress"
              # ファイルの存在をテスト
              test: "test ! -e /var/www/html/wordpress/wp-config.php"
              command: "cp wp-config-sample.php wp-config.php"
            02_inject_dbhost:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
              #           database_name_here を DatabaseName と置換する
              # sed -i 's/database_name_here/${DatabaseName}/g'
                sed -i 's/localhost/${DB.Endpoint.Address}/g' wp-config.php




            02_inject_dbhost:
              cwd: "/var/www/html/wordpress"
              # isntLarge の場合 →最初の!Sub ブロック。
              # それ以外の場合 →2つ目の !Sub ブロックを実行
              command: !If
                - isntLarge
                - !Sub |
                #           database_name_here を DatabaseName と置換する
                # sed -i 's/database_name_here/${DatabaseName}/g'
                  sed -i 's/localhost/${DB.Endpoint.Address}/g' wp-config.php
                - !Sub |
                  sed -i 's/localhost/${DBAuroraCluster.Endpoint.Address}/g' wp-config.php





            03_inject_dbname:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/database_name_here/${DatabaseName}/g' wp-config.php
            04_inject_dbuser:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/username_here/${DatabaseUser}/g' wp-config.php
            05_inject_dbpassword:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                sed -i 's/password_here/${DatabasePassword}/g' wp-config.php



            06_store_instance_ip:
              cwd: "/var/www/html/wordpress"
              command: "curl http://169.254.169.254/latest/meta-data/public-ipv4 > ip.address"
            07a_inject_IP_1: # this allows a restore & change of IP without causing WP errors.
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                myip=`cat ip.address` && echo "define('WP_SITEURL', 'http://${!myip}/wordpress');" >> wp-config.php
            07b_inject_IP_2: # this allows a restore & change of IP without causing WP errors.
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                myip=`cat ip.address` && echo "define('WP_HOME', 'http://${!myip}/wordpress');" >> wp-config.php
            08a_update_theme_1:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                myip=`cat ip.address` && echo "update_option('siteurl','http://${!myip}/wordpress');" >> /var/www/html/wordpress/wp-content/themes/twentyseventeen/functions.php
            08a_update_theme_2:
              cwd: "/var/www/html/wordpress"
              command: !Sub |
                myip=`cat ip.address` && echo "update_option('home','http://${!myip}/wordpress');" >> /var/www/html/wordpress/wp-content/themes/twentyseventeen/functions.php




  S3:
    Type: "AWS::S3::Bucket"
    # DeletionPolicy: Retain
Outputs:
  wproot:
    Description: Access URL for wordpress
    Value: !Join ["", ["http://", !GetAtt EC2.PublicIp, "/wordpress"]]
  wpadmin:
    Description: Admin Login URL - if restoring from snap, always go to this URL first
    Value: !Join ["", ["http://", !GetAtt EC2.PublicIp, "/wordpress/wp-login.php"]]
