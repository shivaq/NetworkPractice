▼ SQS// Simple Queue Service
-------------------------------------------------
・Pull ベースのシステム
//  SQS を定期的にポールしている EC2 を用意
// Push ベースは SNS が最適
・アプリのコンポーネントを疎結合化できる。
// EC2 が削除されても、SQS は消えない。
・アプリのコンポーネントが、フェイルセーフ な SQS にメッセージを格納
// SQS はオートスケールできる
// どんなコンポーネントでもメッセージを格納できる
・1メッセージ 256 KB までのテキストを、どんなフォーマットでも格納できる
// JSON、XML、プレインテキスト
・キュー内滞在時間 1 min ~ 14 days。デフォルトは 4日// Retention ピリオド
・Visibility Time Out
// 読み手がメッセージを取得後、メッセージが SQS キュー内で見えなくなる時間
// Visibility Time Out 失効前にジョブが処理される場合
//  →メッセージはキューから削除される
// 失効前にジョブが処理されない場合
//  →再び visible になり、他の読み手が処理をする。
  // →結果、同じメッセージが二度配信される可能性がある
  //  →アプリの特徴によって、タイムアウト時間を設定しましょう
・上記タイムアウトは最長 12 時間
// これでもだめなら SQS を使わないほうがいい
・SQS long polling
log polling は、メッセージがキューに来るか、ロングボールタイムアウトまで、戻ってこない
 →コスト（お金）を抑えられる
普通のポーリングは、メッセージが空でも聞きに行って戻ってきてを繰り返し続ける

・アプリのコンポーネントが SQS API を使って プログラマティカリーにメッセージを取得
// どんなコンポーネントでもメッセージを取得できる
・キューはコンポーネント間の バッファーみたいな存在になる
// 保存、受領、処理などを行うコンポーネントたちの間の
// Producer が Consumer が消費するよりも早く生産しても問題ない

・Elasticity をアプリに適用
// ２つの EC2 がポーリングしているとする。
// メッセージが大量に生産されたとする。
// オートスケーリンググループに SQS キューをモニターさせて、
// キューが 10 を超えたら、追加の EC2(ポーリング) インスタンスをプロビジョニングして対応
// キューが 1 になったら、EC2(ポーリング) インスタンスの数を減らす
-------------------------------------------------


▼ 例) 航空券サイト
-------------------------------------------------
ユーザーがホノルルと入力
Lambda がトリガーされ、EC2 の Webサーバ が、
SQS に MIME 情報を送り、キューが作られる
// 画像アップロードの場合は、S3 アップロードをトリガーに Lambda が MIME を SQS に送る
▼ もしも App サーバが落ちたら
// SQS は落ちない。
// visibility タイムアウト Window によって、
// キューが invisible 状態になる
// タイムアウトが切れたら、
// メッセージがキューに再登場
// 他の Appサーバ が SQS から改めてキューを発見できる
SQS を使わない場合は、クエリが消える

EC2 の Appサーバ がポール時にそのキューを発見
ジョブ を行う
// MIME を作成したり、SQL ステートメントを作成してクエリしたり
// Mime-Version: 1.0
// Content-Type: type/subtype; parameter
// アップロード先の S3 バケットの位置とか

Appサーバ が エアラインサーバ に最適な東京ホノルル間の航空券をクエリ
受け取った応答が、ウェブサーバ →ユーザーへと返っていく
-------------------------------------------------




▼ Standard vs FIFO キュー
-------------------------------------------------
Standard// デフォルト
・無限/TPS // 1秒あたりで処理可能なトランザクション数
・最低 1 回はメッセージを送る事を保証
・ベストエフォート配信順序// 努力はするけど、保証はできません
// 高速スループットのアーキテクチャーの場合、複数のメッセージが順を守らず送られる可能性がある

FIFO
・300/TPS// 唯一のデメリット
・1 回限りの処理。// メッセージは重複しない
・順序保証。
・Consumer が処理 →削除するまで残り続ける
・メッセージグループをサポート
一つのキュー内で、複数の順序のメッセージグループ？

-------------------------------------------------

▼ ジョブ
-------------------------------------------------
プレーンテキストやJSONなどを
MIME にしたり、SQL ステートメントにしてクエリしたり
-------------------------------------------------






▼ MIME// Multipurpose Internet Mail Extensions
-------------------------------------------------
インターネットやイントラネットなどの TCP/IP ネットワーク上でやりとりされる電子メールで、
各国語や画像、音声、動画などを扱うための規格。
画像のようなバイナリデータをASCII文字列に変換(エンコード)する方法や、
データの種類を表現する方法などを規定
-------------------------------------------------
