ARN とは
-------------------------------------------------
AWS リソースの ユニークな ID。Amazon リソースネーム

IAM ポリシー、Amazon Relational Database Service (Amazon RDS) タグ、API 呼び出しなど、
明らかに全 AWS に渡るリソースを指定する必要がある場合、ARN が必要
-------------------------------------------------




Ephemeral port
-------------------------------------------------
なんなのか
// IP を用いた通信を行うために、
// TCP/IP プロトコルのスタックとして
// 事前定義されている範囲内から自動的に割り当てる

割当ルール
// 接続している間だけ、ポートが一時的に割り当てられる。
// 通信セッション終了後、ポートは再び利用可能な状態になる。

いつ使われるか
// クライアント・サーバ型通信で、
// クライアント側のアプリケーションが 特定のポートを割り当てなかった場合、
// サーバ側アプリケーションが、ウェルノウンポートを使わずにクライアント側と接続する時
-------------------------------------------------




View とは (DB)
-------------------------------------------------
ビュー はデータベースに対するクエリの結果を表す仮想的な テーブル

ビューを参照または更新すると、
ビューの対象となった実際のテーブルへの参照または更新へ変換され、実行される
-------------------------------------------------

マテリアライズドビュー
-------------------------------------------------
効率的なアクセスが可能なため、データウェアハウジングに有効

クエリの結果を実際のテーブルにキャッシュする。
// そのため、最新でない状態を取得する可能性はある
// ただし、キャッシュされたデータは元のテーブルが変更されるたびに更新される

インデックス定義可能
-------------------------------------------------





プロキシサーバ
-------------------------------------------------
内部のネットワークとインターネットの境界で動作し、
両者間のアクセスを代理して行うもの

通信内容チェック
// ネットワーク内におけるインターネットの出入り口をプロキシサーバー経由に限定することで、
// 通信内容を一括してプロキシサーバー側でチェックすることが可能

セキュリティ向上
// クライアントコンピュータは直接インターネットにつながることがなく、
// 不正アクセスや侵入行為を防ぐことができセキュリティ向上

キャッシュ機能

-------------------------------------------------




リバースプロキシ
-------------------------------------------------
普通のサーバ ⇒不特定多数のサーバを対象とする
リバースプロキシ ⇒特定のサーバへの要求を必ず経由する

使われる理由
セキュリティ
// 複数台のサーバがある場合にリバースプロキシで認証・認可を行うとシングルサインオンを実現できる

暗号化/SSL高速化
暗号化をWebサーバ自体が行うのではなく、SSL 高速化のためのハードウェアを備えたリバースプロキシサーバで行う。

https://ja.wikipedia.org/wiki/%E3%83%AA%E3%83%90%E3%83%BC%E3%82%B9%E3%83%97%E3%83%AD%E3%82%AD%E3%82%B7








-------------------------------------------------






HAProxy
-------------------------------------------------
・複数の転送先サーバーを設定することで、ロードバランサとして利用可能
・パケットの内容に応じて転送先を変える
TCPレベルでの接続転送
HTTPに特化した設定項目


クライアントからの HAProxy を実行しているサーバーに向けた TCP 接続を
別のサーバーに転送する


ロードバランサ を使ってクライアントからの接続を負荷分散

リバースプロクシなどを使ってリクエストを振り分けるケース



-------------------------------------------------











データベース・クラスタ
-------------------------------------------------
1つのデータベースを、複数のサーバーや仮想サーバー上に構築するシステム
高可用性やパフォーマンス向上の観点から行われる


実現できること
-------------------------------------------------
・高可用性（Transactional）
サーバー機やストレージ器機 を冗長化


並列処理（Analytic）
データウェアハウジングなど、処理の負荷が高い場合に並列処理で解析時間を短縮できる

性能向上（Online）
スケールアウトして負荷を分散
-------------------------------------------------





▼ 高可用性クラスタ
-------------------------------------------------


▼ 共有ディスクを用いたコールド・スタンバイ型
-------------------------------------------------
データベースは、「共有ディスク」に格納
Active サーバが 共有ディスクを使って DB を運転
フェイルオーバー時は
スタンバイ サーバが 共有ディスクを引き継ぐ

利点
データベース自身に高可用性の機能がない場合でも、外部のミドルウエアで高可用性の機能を持たせることができる

デメリット
データベース・サーバーのクラッシュを検出することや、共有ディスクの修復に、時間がかかってしまう
予備系サーバーが共有ディスクを引き継ぐ際に、現用系のサーバーが共有ディスクを使っていないことを確認する手段が必要
現用系がクラッシュした時点で実行中のトランザクションが失われる

ディスク自身がだめになったら終わり
-------------------------------------------------




▼ 共有ディスクを用いた同時マウント型
-------------------------------------------------
Active/Active
クラッシュ時のトランザクションを引き継げる
ディスク自身がだめになったら終わり
-------------------------------------------------



▼ シングル・マスター型
-------------------------------------------------
共有ディスク はなくてもいい

2つ以上のサーバを マスター/スレーブ と分ける

マスターが行うこと
SQL 文の処理

スレーブ
DB 更新情報が送られ、マスターと同じ DB に保たれる
-------------------------------------------------
