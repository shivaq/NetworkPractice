何も見ないで VPC を構築できない限り、テストを受けてはいけない



▼ VPC // Virtual Private Cloud
-------------------------------------------------
クラウド上の Virtual DataCenter だと考えていい
AWS クラウド上に、論理的に隔離された セクションを構築し、
Virtual ネットワーク 上に AWS リソースをローンチできる。

・1 サブネット = 1 AZ
・ステートフル ⇒セキュリティグループ // 80 を開けば、送受信できる
・ステートレス ⇒NACL // 80 を開くとして、送受信それぞれ設定が必要
・Transitive Peering はない。
・Max VPC/1 リージョン → 5


構成要素
// IGW/VPG(入り口はどちらか), Route Table, NetworkACL, Subnets, SecurityGroup

-------------------------------------------------


▼ Virtual ネットワーク環境を完全にコントロール
-------------------------------------------------
// IP アドレスレンジの選択、サブネットの作成、routing テーブルや ネットワークゲートウェイの設定

・web サーバの外部向けのサブネットを作成
・DB や アプリケーションサーバなどのバックエンドシステムを、private 向けのサブネットに配置
・ACL や セキュリティグループによる、EC2 インスタンスのサブネットへの 複数層によるコントロールが可能

・Hardware Virtual Private Network(VPN) 接続を、
企業のDC と VPC との間に通すことで、
AWS を DC の 拡張 として扱える
-------------------------------------------------



▼ サブネット
-------------------------------------------------
・1つのサブネット内に、複数の AZ の EC2 インスタンスは保持できない
・選択したサブネット内に、EC2 インスタンスをローンチする
・異なるサブネット間で、ルートテーブルを設定
・インターネットゲートウェイを作成し、VPC にアタッチ
// インターネットゲートウェイは、VPC につき 1つのみ
・サブネット毎に、ACL を使って特定の IP アドレスをブロックすることが可能
・セキュリティグループも使える // SG は AZ を超えて使える

・5 つのリザーブ済みサブネットアドレス // 10.0.0.0/24 を例に取る
// ネットワークアドレス 10.0.0.0
// VPC ルータアドレス 10.0.0.1
// DNS サーバアドレス 10.0.0.2
// for future use for AWS 10.0.0.3
// ブロードキャストアドレス 10.0.0.255 // ブロードキャスティングは VPC サポートしてないけれども、リザーブしてる



使用可能 IP アドレス範囲
10.0.0.0 - 10.255.255.255(10/8)
172.16.0.0 - 172.31.255.255(172.16/12)
192.168.0.0 - 192.168.255.255(192.168/16)

アドレス範囲計算ページ
http://cidr.xyz/
-------------------------------------------------






▼ デフォルト VPC と カスタム VPC との違い
-------------------------------------------------
デフォルト
・すぐにデプロイできる
・全サブネットがインターネットに出ることができる

カスタム
・インターネットに出ることができるサブネットを制限できる

全 EC2 インスタンスは、プライベートとパブリック両方の IP アドレスがある
-------------------------------------------------



▼ VPC Peering
-------------------------------------------------
隔離された VPC 同士が交信する方法
・private IP address を使う// direct network route
・インスタンス達に、同じ private ネットワークにいるかのように振る舞わせる
・異なる AWS アカウントや、同じアカウントの異なる VPC とも ピアアクセス可能

スター構成
ハブとなる VPC を決めて、中心だけが各ノードと交信できるようにする
ノード間の交信は、ピアアクセスを確立して行う

-------------------------------------------------




▼ NAT インスタンス
-------------------------------------------------
いずれ使われなくなりそうなサービスさが、試験範囲にまだいる

// EC2 インスタンス作成 ⇒コミュニティAMI で nat で検索
//  ⇒ネットワークをさっき作ったやつにする
  ⇒サブネットを パブリックなやつにする ⇒NAT-INSTANCE とか名付ける
//    ⇒SG はいつもの Web-DMZ グループでいい。 ⇒作成
//
作成後、Action > ネットワーキング >送信元/送信先のチェック ⇒無効化
// // デフォルトで、あらゆる EC2 インスタンスはトラフィックの送信先か、送信元かでなければならない。
// // しかし、NAT インスタンスは、自身が それに当てはまらなくてもトラフィックを送ったり受信しなければならない。
// // よって、 NAT インスタンスに限っては、これを無効化する
//
デフォルトのルートテーブルに、NAT インスタンスを 追加
//  ⇒NAT インスタンス経由で 外部にルートアウトできるようになる
// // VPC ＞ Route Table ⇒デフォルトルートテーブルを選択 ⇒Edit
// // 0.0.0.0/0 ターゲット NAT インスタンスを選択
// 結果、インターネットに接続できる。 yum が通る
・セキュリティグループの影響下にある

欠点
・NAT インスタンスがサポートできるトラフィック量は、インスタンスサイズ次第。
t2-micro とか使いものにならない。
・高可用性のためには、オートスケーリンググループ、異なる AZ での サブネットの利用、
スクリプトによる自動フェイルオーバーを使うといい。
-------------------------------------------------













▼ VPC ラボ
-------------------------------------------------


▼ VPC の作成
-------------------------------------------------
VPC ＞ Create VPC
// 10.0.0.0/16

IPv6 CIDR block
// Amazon provided IPv6 CIDR block

デフォルトで同時作成されるもの
// Security Group, Network ACL, Route Table
同時作成されないもの
// サブネット、IGW
-------------------------------------------------



▼ サブネットの作成
-------------------------------------------------
VPC と AZ を選択

IPv4 CIDR ブロック
// 10.0.1.0/24

名前タグをわかりやすく
// 10.0.1.0-ap-northeaset-1a

10.0.2.0/24 のぶんも、別の AZ に作成
-------------------------------------------------



▼ IGW の作成
-------------------------------------------------
MyIGW みたいな名前で。

VPC にアタッチ
-------------------------------------------------



▼ Route Table の作成
-------------------------------------------------
インターネット接続を管理する ルートテーブルを新規作成する
// サブネット新規作成すると、
// そのサブネットはデフォルトでメインルートテーブルに紐付けられている
// メインの送信先には、VPC 全体の アドレスが追加されているため、VPC内での通信に制限がない状態
// ウィザードなし、手動作成時のルートテーブルは、ターゲットがローカルのみで、外部にアクセスできない
Route Table の作成
MyInternetRouteOut

Route ＞ 編集
別のルートを追加 > IPv4 と IPv6 とを追加
0.0.0.0/0
::/0
ターゲットは、さっき作った IGW を選択
 ⇒このルートと関連づいた全てのサブネットは パブリックになる

サブネットの関連付け > 編集
10.0.1.0 を関連付ける
-------------------------------------------------


▼ パブリックサブネットになったサブネットに、パブリック IP アドレス割当を有効化
-------------------------------------------------
サブネット > サブネットのアクション > 自動割当有効化
-------------------------------------------------




▼ EC2 インスタンスの作成
-------------------------------------------------
Public な EC2 を作成
MyWebServer
// Network  ⇒さっき作った VPC
// サブネット ⇒外部と繋がってるサブネット

// セキュリティグループ
// 新規作成が必要 // セキュリティグループは、リージョンは超えられても、VPC は超えられない
// Web-DMZ  // HTTP を許可

// #!/bin/bash
// yum install httpd -y
// yum update -y
// service httpd start
// chkconfig httpd on
// echo "<html><h1>スーパー パブリック EC2❣</h1></html>" > /var/www/html/index.html

Private な EC2 を作成
MyMySQLServer
// サブネット ⇒外部とつながっていないサブネット
// セキュリティグループ ⇒デフォルト

public な方の パブリックアドレスへ SSH してみる

踏み台サーバ作成
// パブリックサブネット
// ElasticIP 割当
// BastionSG →22 インバウンド 0.0.0.0/0
// デフォルトもつけておくと、ブログにはあるが。。。
-------------------------------------------------
踏み台経由の 2段階 SSH を有効化

// Windows の ~/.ssh/config ファイルを作成して下記記載 →ssh appTestServer で、一気にapp サーバに行ける
//
// Host bastion
//  Hostname 54.249.211.19
//  User ec2-user
//  IdentityFile /c/Users/Yasuaki/Dropbox/01.study/SSH/VPC-Practice.pem

//  Host appTestServer
//   Hostname 10.0.1.250
//   User ec2-user
//   IdentityFile /c/Users/Yasuaki/Dropbox/01.study/SSH/VPC-Practice.pem
//   ProxyCommand ssh bastion -W %h:%p
-------------------------------------------------


▼ セキュリティグループの新規作成
-------------------------------------------------
グループ名と説明は一緒でいい
My-RDS-SG
VPC ⇒自作 VPC

タイプ
SSH、MySQL/Aurora、HTTP、HTTPS、All ICMP -IPv4

パブリックサブネットへの送受信のみできるようにする
// ソース はパブリックに開いているサブネット
// 10.0.1.0/24

MyMySQLServer に、このセキュリティグループを割当 // デフォルトは外す
-------------------------------------------------



▼ Public なサブネットと Private なサブネットとの間の交信
-------------------------------------------------
public な方の パブリックアドレスへ SSH して、private なサブネットに ping

-------------------------------------------------















▼ NAT ゲートウェイ
-------------------------------------------------
VPC > NAT ゲートウェイ // IPv4 用
VPC > Egress Only IGW // IPv6 用

・10 GBps までオートスケールする
・セキュリティグループの影響下にない
・異なる AZ 毎に、NAT ゲートウェイを配置 + RouteTable に登録で、冗長化すべし
・Amazon が管理してくれてる クラスター化されたインスタンスみたいな状態
// NatGateway が fail しても、復帰してくれる
// アンチウイルスやパッチもやってくれてる
・送信元/送信先のチェックの無効化不要

ラボ
-------------------------------------------------
NAT ゲートウェイの作成
// サブネット →public サブネットを選択
・パブリック IP アドレスは自動的に割り当てられる
//  →Elastic IP の作成 →NAT ゲートウェイの作成 →プロビジョニング完了まで 15 分くらいかかる

ルートテーブルの編集
// private なサブネット > ルート →別のルートを追加 →保存
// 0.0.0.0/0    ターゲット: natなんちゃら

private サブネットの EC2 で yum が通るか確認
// EC2 の public な方から、 private サブネットの EC2 にアクセス
-------------------------------------------------







▼ NACL // Network Access Control List
-------------------------------------------------
・VPC 作成時は、自動でデフォルト NACL を割り当てる。で、デフォルトNACL は入出全OK
・NACL 作成時は、デフォルトで全て拒否
・全サブネットはいずれかの NACL と関連付けが必要。明示的紐付けしない場合、デフォルトNACLに紐づく
・NACL は AZ を超えて存在。 // サブネットは 1つの AZ 内のみ
・セキュリティグループ の手前でチェックしている
・セキュリティグループは インスタンスレベルの FW のような感じ。NACL はサブネットレベルの追加セキュリティレイヤー
・ルール番号順に評価される // 後続のルールとかぶる場合、先のルールが適用される
・IP アドレスのブロックができるのは NACL. セキュリティグループにはできない。

サブネット *..1 NACL
// 紐付けNACL を変えれば、直前のNACLとのヒモ付が外れる
VPC 1...1 NACL

ラボ
-------------------------------------------------
VPC > NACL
Network ACL を作成
MyWebNACL

確認
パブリック な方に SSH して、webサーバを構築
// sudo su ⇒yum install httpd -y ⇒service httpd start ⇒chkconfig httpd on
// cd /var/www/html
// vi index.html

新 NACL に
インバウンドルール を追加
// 100 HTTP, 200 HTTPS, 300 SSH それぞれのソースに どこからでも、を入れる 0.0.0.0/0
アウトバウンドルール を追加 300 には Ephemeral ポートを設定
// 100 HTTP, 200 HTTPS, 300 カスタムTCPルール ポート範囲 1024-65535 全部 0.0.0.0/0

// Ephemeral ポートの範囲は、下記ドキュメントを参考に ELB 用に使われている範囲を使用している
// https://docs.aws.amazon.com/AmazonVPC/latest/UserGuide/VPC_ACLs.html#VPC_ACLs_Ephemeral_Ports

サブネットの関連付け
// パブリックなサブネットを上記 NACL に関連付け
// ※ サブネット *..1 NACL

特定の IP アドレスからのアクセスを拒否 かつ
そのルール番号を、Allow よりも若い番号にすれば
// HTTP 全許可 してても、そのアドレスからのアクセスはできなくなる
-------------------------------------------------









▼ VPC と ロードバランサー
-------------------------------------------------
高可用性のためには 2つ以上の AZ の サブネット を選択する必要がある
-------------------------------------------------











▼ VPC Flow Logs
-------------------------------------------------
VPC を出入りする IP トラフィックの情報を取得するサービス
ログの保存/確認には CloudWatch が使われる

・異なるアカウントの VPC と peer されている場合、FlowLog は使えない
・FlowLog にタグは使えない
・FlowLog 作成後は設定変更できない// 異なる IAM ロールに付け替えられない

モニター対象外 IP トラフィック
・インスタンス -- DNS 間のトラフィックのうち、自身の DNS サーバが対象ではないもの
・Windows インスタンスが、Amazon Windows ライセンス有効化のために生成するトラフィック
・インスタンスメタデータへのトラフィック // 169.254.169.254
・DHCP トラフィック
・デフォルト VPC ルータの 割り当て済み IP アドレスへのトラフィック



取得ログの3つのレベル
・VPC
・サブネット
・Network インターフェイス

ラボ
-------------------------------------------------
VPC > アクション ⇒FlowLog の作成

FlowLog 用ロールの作成
// ロール > アクセス権限の設定
// 自動的に flowlogsRole という名で設定される ⇒許可

ロールの選択
// 上記作成ログを選択

送信先ロググループの作成
// CloudWatch > Logs > ロググループの作成
// MyCustomVPCFlowLog

送信先ロググループ を設定



-------------------------------------------------


ClowdWatch と Lambda
-------------------------------------------------
CloudWatch > Log > アクション
AWS Lambda や Elasticsearch へストリームを流したりできる。
-------------------------------------------------










▼ NAT vs Bastion // 踏み台サーバ
-------------------------------------------------
NAT
private サブネットの EC2 インスタンスに インターネットトラフィックを提供
外部から private サブネットへの接続はさせない

踏み台サーバ
・外部から 踏み台サーバに SSH/RDP して、アドミン作業を行う

・2 台用意しそれぞれの AZ に配置、EIP をアタッチし、グローバルIP を固定化
・踏み台専用のセキュリティグループを作成し、パブリックサブネット、プライベートサブネット からのSSHアクセスのみを許可

・インターネットからアクセスを許可する場合は、
0.0.0.0/0のような不特定多数からのアクセス許可ではなく、/32や特定のネットワーク帯に絞る
-------------------------------------------------




▼ VPC エンドポイント
-------------------------------------------------
インターフェイスエンドポイント
// Elastic Network Interface (ENI) を、サービス宛てのトラフィックの"エントリポイント"として、
// EC2 インスタンスにくっつけて使用
// 単一の ENI に頼っている

ゲートウェイエンドポイント
// サービス宛てのトラフィックの"ルートテーブル内のルートのターゲット"として機能
// 単一の ENI に頼っていないので、resilient

ラボ
-------------------------------------------------
インターナル GW を使って S3 に private サブネットから、外部を経由せずにアクセスさせる

private の EC2 に S3 へのアクセスロールを適用
// EC2 に S3 へのフルアクセスを許可するロールを割当

VPC > NACL private も public も、デフォルトの NACL に紐付け

private EC2 に SSH して aws s3 ls
 // ⇒接続を確認

ルートテーブルから IGW を削除

private EC2 で aws s3 ls
// 接続されない事を確認

VPC > エンドポイント > 作成
// S3 の Gateway タイプを選択
// 自作の VPC を選択
// メインの方のルートテーブルを選択 // 明示的に紐付けない場合に紐付けられるルートテーブル
 // ⇒作成

ルートテーブルを確認
メインの方のルートテーブルに、S3 の インナーゲートウェイへのルートが追加されている

private EC2 で aws s3 ls ⇒タイムアウト
// internal GW を使って S3 にアクセスする場合、リージョンを登録する必要がある
// aws configure
// リージョンに下記登録
// Default region name [None]: ap-northeast-1

aws s3 ls
-------------------------------------------------




▼ VPC を削除する
-------------------------------------------------
対象 EC2 を削除
// 依存関係があるため、これをしないと VPC を削除できない

NAT ゲートウェイを削除
// これをしないと、こいつの中で Map している IGW を削除できない

IGW を VPC からデタッチ ⇒削除
エンドポイントを削除
VPC を削除
-------------------------------------------------
